void gtk_window_set_position(GtkWindow* window, GtkWindowPosition position);
les valeurs possible de la position :
    =>GTK_WIN_POS_NONE : la fenêtre aura une position aléatoire lors de son affichage ;
    =>GTK_WIN_POS_CENTER : la fenêtre sera centrée à l'écran ;
    =>GTK_WIN_POS_MOUSE : le coin supérieur droit de la fenêtre correspondra à la position de la souris au moment de l'affichage ;
    =>GTK_WIN_POS_CENTER_ALWAYS : la fenêtre sera centrée et ne pourra être déplacée ;
    =>GTK_WIN_POS_CENTER_ON_PARENT : la fenêtre sera centrée par rapport à la fenêtre parente (notion abordée dans le prochain chapitre).
    
/// ON PARLE DE BOX 

Comme toujours, la création de ces widgets est très simple. Les fonctions suivantes permettent de créer respectivement une GtkHBox et une GtkVBox :
 
Sélectionnez

GtkWidget* gtk_hbox_new(gboolean homogeneous, gint spacing);
GtkWidget* gtk_vbox_new(gboolean homogeneous, gint spacing);

Le paramètre homogeneous définit si tous les widgets contenus dans la GtkBox utilisent un espace équivalent. C'est-à-dire que si ce paramètre est à TRUE, la zone d'affichage de la GtkBox sera divisée en x zone(s) de taille égale (x étant le nombre de widgets contenus).

Le paramètre spacing permet de définir l'espacement entre chacun des widgets contenus.
VI-A-2. Insertion d'un widget
▲

Les widgets GtkHBox et GtkVBox n'ont pas de fonctions spécifiques pour l'ajout de widget. Il faut, pour cela, utiliser les fonctions de GtkBox dont dérivent les différents types de box. Les fonctions les plus couramment utilisées sont :
 
Sélectionnez

void gtk_box_pack_start(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding);
 
void gtk_box_pack_end(GtkBox* box, GtkWidget* child, gboolean expand, gboolean fill, guint padding);

La première fonction insère les widgets de haut en bas (pour les GtkVBox) ou de gauche à droite (pour les GtkHBox). La seconde fonction fait exactement le contraire, c'est-à-dire, de bas en haut pour les GtkVBox et de droite à gauche pour les GtkHBox.

Le paramètre box est bien entendu la GtkBox dans laquelle on veut insérer le widget child (2e paramètre).

Le paramètre expand n'est utile que si la GtkBox en question n'est pas définie comme homogène (homogeneous=FALSE lors de la création). Dans ce cas, tous les widgets qui auront été insérés avec la valeur expand=TRUE se partageront tout l'espace libre de la GtkBox (les widgets avec expand=FALSE n'utiliseront que l'espace qui leur est nécessaire).

Le paramètre fill permet de définir si le widget enfant occupe toute la zone qui lui est réservée.

Et enfin, le paramètre padding permet d'ajouter de l'espace autour du widget (en plus de celui défini par le paramètre spacing lors de la création de la GtkBox).


/// On parle de GtkGRID

    =>GtkWidget* gtk_grid_new(void);
        Crée un nouveau conteneur GtkGrid.

    =>void gtk_grid_attach(GtkGrid *grid, GtkWidget *widget, gint left, gint top, gint width, gint height);
        Place un widget dans la grille à une position spécifique, avec une largeur et une hauteur spécifiées.

    =>void gtk_grid_attach_next_to(GtkGrid *grid, GtkWidget *widget, GtkWidget *sibling, GtkPositionType side, gint width, gint height);
        Place un widget dans la grille à côté d'un autre widget existant, avec une largeur et une hauteur spécifiées, en fonction de la position relative (en haut, en bas, à gauche ou à droite) par rapport au widget existant.

    =>void gtk_grid_insert_row(GtkGrid *grid, gint position);
        Insère une nouvelle ligne dans la grille à la position spécifiée.

    =>void gtk_grid_insert_column(GtkGrid *grid, gint position);
        Insère une nouvelle colonne dans la grille à la position spécifiée.

    =>void gtk_grid_remove_row(GtkGrid *grid, gint position);
        Supprime une ligne spécifique de la grille.

    =>void gtk_grid_remove_column(GtkGrid *grid, gint position);
        Supprime une colonne spécifique de la grille.

    =>void gtk_grid_set_row_spacing(GtkGrid *grid, guint spacing);
        Définit l'espacement vertical entre les widgets dans la grille.

    =>void gtk_grid_set_column_spacing(GtkGrid *grid, guint spacing);
        Définit l'espacement horizontal entre les widgets dans la grille.

    =>void gtk_grid_set_row_homogeneous(GtkGrid *grid, gboolean homogeneous);
        Définit si les lignes de la grille auront toutes la même hauteur (homogène) ou si elles auront des hauteurs différentes (non homogène).

    =>void gtk_grid_set_column_homogeneous(GtkGrid *grid, gboolean homogeneous);
        Définit si les colonnes de la grille auront toutes la même largeur (homogène) ou si elles auront des largeurs différentes (non homogène).
